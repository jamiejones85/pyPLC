# This is the template file pyPlc.ini.template.
# Copy this file in the same folder like the pyPlc.py, and rename it to pyPlc.ini

[general]
# mode can be either PevMode to use as car, or EvseMode to use as charger
mode = PevMode

# Simulation without modem
# For development purposes, make it possible to run two instances (pev and evse) on one machine, without
# a modem connected. This feature is not tested since a long time, most likely does not work as intended.
# todo: replace isSimulationMode by this setting
is_simulation_without_modems = false

# The Ethernet interface. Usually eth0 on Raspberry.
# This setting is considered only on linux. 
eth_interface = eth0

# The Ethernet interface name on Windows. Something like
# \Device\NPF_{E4B8176C-8516-4D48-88BC-85225ABCF259}
eth_windows_interface_name = \Device\NPF_{E4B8176C-8516-4D48-88BC-85225ABCF259}

# If a display is connected via serial line, e.g. an WIFI-KIT-32 running the software from https://github.com/uhi22/SerialToOLED
display_via_serial = yes

# LightBulbDemo turns on the relay with a short delay in the charging loop, to stabilize the voltage
# before the resistive load is connected.
light_bulb_demo = no

# SOC simulation.
# In PevMode, simulate a rising SOC while charging.
soc_simulation = yes

# Device selection for the digital outputs, for CP state and power relays
# Possible options:
#  dieter: Serial controlled device, which controls the digital outputs. E.g. arduino from https://github.com/uhi22/dieter
#  beaglebone: GPIO pins of the beagleBone, as used in https://github.com/jsphuebner/pyPLC/tree/beaglebone
#  celeron55device: Serial controlled device as used in https://openinverter.org/forum/viewtopic.php?p=56192#p56192
digital_output_device = dieter
#digital_output_device = beaglebone
#digital_output_device = celeron55device
#digital_output_device = raspberrypi


# Device to read the physically measured inlet voltage in PevMode
# Possible options:
#  dieter: The high-voltage dieter from https://github.com/uhi22/dieter, which is connected on serial port.
#  none: if no measurement is intended.
#  celeron55device: as used in https://openinverter.org/forum/viewtopic.php?p=56192#p56192
#analog_input_device = dieter
analog_input_device = none
#analog_input_device = celeron55device
#analog_input_device = raspberrypi


# Criteria for ending the PreCharge phase in PevMode
# Possible options:
#  yes: use the EVSEPresentVoltage which is reported by the charger, to decide the end of the precharge
#  no: use the physically measured inlet voltage to decide the end of the precharge
use_evsepresentvoltage_for_precharge_end = yes

# Use the physically measured inlet voltage to show on display during the charge loop.
# If false, we are showing the EVSEPresentVoltage which is reported by the charger.
use_physical_inlet_voltage_during_chargeloop = no

# Voltage threshold for the end-of-precharge decision
# This is the maximum difference voltage between the charger voltage and the accu voltage. If the actual voltage
# difference is lower than this threshold, we will close the power relay, to connect the accu to the charger.
# Unit: volt
u_delta_max_for_end_of_precharge = 10

# Added by celeron55
# The serial port and baud rate used for communication. Used
# for serial devices like Dieter, OLED-Display and
# celeron55's measuring and switching device
# Examples:
#   /dev/ttyS1
#   auto
serial_port = auto
serial_baud = 19200

# The target voltage used in the CurrentDemandRequest.
# This is a value for first try-outs. Better would
# be if the BMS would provide the value. 
# 11 * 6 * 4.1V = 66 * 4.1V = 270V
charge_target_voltage = 270

# By using an external manager script, this is useful for splitting charging
# into separately logged sessions and avoiding logging when not connected to a
# charger
exit_on_session_end = False

# Run test cases.
# Explanation in doc/testing_and_simulation.md
# Possible values:
#  No: No testcases are executed. Normal function as Evse or Pev.
#  Yes: Testcases are executed. The EvseMode will produce various errors for fault injection tests.
testsuite_enable = No

# Logging to UDP Syslog messages
# If this is activated, the pyPlc will send all logging messages also to the network interface,
# in form of UDP Syslog messages. For details see in udplog.py.
udp_syslog_enable = Yes

# REST callback for SoC states. Comment out to disable. Do not leave a trailing slash
soc_callback_enabled = False
soc_callback_endpoint = http://1.1.1.1
